<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr. Liu&#39;s Tech Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuyang0001.gitee.io/"/>
  <updated>2021-04-09T17:09:27.558Z</updated>
  <id>https://liuyang0001.gitee.io/</id>
  
  <author>
    <name>Liu Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用docker搭建大数据环境</title>
    <link href="https://liuyang0001.gitee.io/2021/04/10/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BA%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://liuyang0001.gitee.io/2021/04/10/使用docker搭建大数据环境/</id>
    <published>2021-04-09T17:04:02.000Z</published>
    <updated>2021-04-09T17:09:27.558Z</updated>
    
    <content type="html"><![CDATA[<p>使用docker进行构建单机伪分布式hadoop环境。</p><a id="more"></a><hr><p>[TOC]</p><h1 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h1><hr><p>搭建的docker-images使用的软件版本如下：</p><ul><li>hadoop版本：2.7.7</li><li>spark版本：3.1.1</li><li>jdk版本：1.8</li><li>hive版本：待添加</li><li>Hbase版本：1.4.13</li></ul><blockquote><p><strong>ps：</strong></p></blockquote><blockquote><p><strong>1. 请先确保你的 git 、docker 和 make 是可用的。</strong></p></blockquote><blockquote><p><strong>2. 镜像内的用户密码为：qwe</strong></p></blockquote><hr><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><h3 id="clone本仓库到你的本地"><a href="#clone本仓库到你的本地" class="headerlink" title="clone本仓库到你的本地"></a>clone本仓库到你的本地</h3></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:Liuyang0001/docker-hadoop.git</span><br></pre></td></tr></table></figure><ol><li><h3 id="使用make进行docker镜像下载"><a href="#使用make进行docker镜像下载" class="headerlink" title="使用make进行docker镜像下载"></a>使用make进行docker镜像下载</h3></li></ol><p>进到仓库目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> docker-hadoop</span><br></pre></td></tr></table></figure><p>使用make语句进行拉取docker镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make pull</span><br></pre></td></tr></table></figure><ol><li><h3 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h3></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make up</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210408195400.png" alt=""></p><ol><li><h3 id="进入镜像"><a href="#进入镜像" class="headerlink" title="进入镜像"></a>进入镜像</h3></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make bash</span><br></pre></td></tr></table></figure><p>启动hadoop伪分布式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/onekey</span><br><span class="line">sh run.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210408195558.png" alt=""></p><p>打开网址查看：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:50070/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210408195822.png" alt=""></p><p>关闭hadoop集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh ~/onekey/stop.sh <span class="comment">#关闭hadoop</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出bash</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210408200428.png" alt=""></p><ol><li><h3 id="退出并解除容器"><a href="#退出并解除容器" class="headerlink" title="退出并解除容器"></a>退出并解除容器</h3></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make down</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210408200452.png" alt=""></p><hr><p><strong>Enjoy it.</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用docker进行构建单机伪分布式hadoop环境。&lt;/p&gt;
    
    </summary>
    
      <category term="大数据学习笔记" scheme="https://liuyang0001.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker" scheme="https://liuyang0001.gitee.io/tags/Docker/"/>
    
      <category term="Hadoop" scheme="https://liuyang0001.gitee.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="https://liuyang0001.gitee.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>WSL搭建Hadoop与Spark环境</title>
    <link href="https://liuyang0001.gitee.io/2021/03/20/WSL%E6%90%AD%E5%BB%BAHadoop%E4%B8%8ESpark%E7%8E%AF%E5%A2%83/"/>
    <id>https://liuyang0001.gitee.io/2021/03/20/WSL搭建Hadoop与Spark环境/</id>
    <published>2021-03-20T12:07:43.000Z</published>
    <updated>2021-03-20T12:11:02.768Z</updated>
    
    <content type="html"><![CDATA[<p>在wsl上搭建大数据Hadoop与Spark环境。</p><a id="more"></a><hr><p>[TOC]</p><p><center>❤❤❤<center></center></center></p><h2 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先在oracle官网下载<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html" target="_blank" rel="noopener">jdk1.8</a>，最好选这个版本，其他版本可能会出现问题。</p><p>版本支持信息如下：</p><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/c786cc3cb43b31f790080446ca5e7c0.png" alt=""></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>找到下载的文件进行解压：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf  jdk-*-linux-x64.tar.gz -C  /usr/<span class="built_in">local</span>    <span class="comment">#解压到/usr/local目录下</span></span><br></pre></td></tr></table></figure><p>改名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv jdk* jdk8</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc <span class="comment"># 不是用zsh就改成.bashrc</span></span><br></pre></td></tr></table></figure><p>在最后添加环境后，:x 保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdk环境</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk8</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使之生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320151942.png" alt=""></p><p><center>❤❤❤<center></center></center></p><h2 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><p>下载最新版的hadoop，当前为3.3.0：</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.3.0/" target="_blank" rel="noopener">镜像下载</a></p><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320152523.png" alt=""></p><h3 id="解压-1"><a href="#解压-1" class="headerlink" title="解压"></a>解压</h3><p>找到下载的文件进行解压：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf  hadoop*.tar.gz -C  /usr/<span class="built_in">local</span>    <span class="comment">#解压到/usr/local目录下</span></span><br></pre></td></tr></table></figure><p>改名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">sudo mv hadoop* hadoop</span><br></pre></td></tr></table></figure><p>添加环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc <span class="comment"># 不是用zsh就改成.bashrc</span></span><br></pre></td></tr></table></figure><p>在最后添加环境后，:x 保存退出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hadoop环境</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"><span class="built_in">export</span> JAVA_LIBRAY_PATH=/usr/<span class="built_in">local</span>/hadoop/lib/native</span><br></pre></td></tr></table></figure><p>使之生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="检验-1"><a href="#检验-1" class="headerlink" title="检验"></a>检验</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320153223.png" alt=""></p><p><center>❤❤❤<center></center></center></p><h2 id="Hadoop伪分布式模式配置"><a href="#Hadoop伪分布式模式配置" class="headerlink" title="Hadoop伪分布式模式配置"></a>Hadoop伪分布式模式配置</h2><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><p>进到配置目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop/etc/hadoop</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320165639.png" alt=""></p><h3 id="修改hadoop-env-sh"><a href="#修改hadoop-env-sh" class="headerlink" title="修改hadoop-env.sh"></a>修改hadoop-env.sh</h3><p>添加hadoop_opts和jdk路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk8</span><br><span class="line"><span class="comment"># 解决Unable to load native-hadoop library for your platform...</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_OPTS=<span class="string">"-Djava.library.path=<span class="variable">$&#123;HADOOP_HOME&#125;</span>/lib/native"</span></span><br></pre></td></tr></table></figure><h3 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim core-site.xml</span><br></pre></td></tr></table></figure><p>修改配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim hdfs-site.xml</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><center>❤❤❤<center></center></center></p><h2 id="测试HDFS"><a href="#测试HDFS" class="headerlink" title="测试HDFS"></a>测试HDFS</h2><h3 id="启动ssh"><a href="#启动ssh" class="headerlink" title="启动ssh"></a>启动ssh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><h3 id="NameNode格式化"><a href="#NameNode格式化" class="headerlink" title="NameNode格式化"></a>NameNode格式化</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/hadoop/bin/hdfs namenode –format</span><br></pre></td></tr></table></figure><h3 id="启动dfs"><a href="#启动dfs" class="headerlink" title="启动dfs"></a>启动dfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/hadoop/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320171616.png" alt=""></p><blockquote><p>启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”</p></blockquote><h3 id="查看hadoop页面"><a href="#查看hadoop页面" class="headerlink" title="查看hadoop页面"></a>查看hadoop页面</h3><p>浏览器输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:9870</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320172229.png" alt=""></p><p><center>❤❤❤<center></center></center></p><h2 id="YARN单机配置"><a href="#YARN单机配置" class="headerlink" title="YARN单机配置"></a>YARN单机配置</h2><h3 id="修改mapred-site-xml"><a href="#修改mapred-site-xml" class="headerlink" title="修改mapred-site.xml"></a>修改mapred-site.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改yarn-site-xml"><a href="#修改yarn-site-xml" class="headerlink" title="修改yarn-site.xml"></a>修改yarn-site.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查看资源管理页面"><a href="#查看资源管理页面" class="headerlink" title="查看资源管理页面"></a>查看资源管理页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/hadoop/sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>打开网址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8088/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320195607.png" alt=""></p><p><center>❤❤❤<center></center></center></p><h2 id="Spark安装"><a href="#Spark安装" class="headerlink" title="Spark安装"></a>Spark安装</h2><h3 id="下载spark"><a href="#下载spark" class="headerlink" title="下载spark"></a>下载spark</h3><p><a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">下载地址</a></p><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320175237.png" alt=""></p><h3 id="解压-2"><a href="#解压-2" class="headerlink" title="解压"></a>解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf  spark*.gz  -C  /usr/<span class="built_in">local</span>    <span class="comment">#解压到/usr/local目录下</span></span><br></pre></td></tr></table></figure><p>改名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv  spark*   spark</span><br></pre></td></tr></table></figure><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/<span class="built_in">local</span>/spark</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>: <span class="variable">$&#123;SPARK_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure><p>使之生效：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p><center>❤❤❤<center></center></center></p><h2 id="配置Spark"><a href="#配置Spark" class="headerlink" title="配置Spark"></a>配置Spark</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/spark/conf</span><br></pre></td></tr></table></figure><h3 id="修改spark-env-sh"><a href="#修改spark-env-sh" class="headerlink" title="修改spark-env.sh"></a>修改spark-env.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim spark-env.sh</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$JAVA_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk8</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=localhost</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=4g</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/spark/sbin/start-all.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320181728.png" alt=""></p><p>打开网址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320181840.png" alt=""></p><h3 id="启动pyspark"><a href="#启动pyspark" class="headerlink" title="启动pyspark"></a>启动pyspark</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyspark --master <span class="built_in">local</span>[2]</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com//liuyang0001/blogimage/raw/master/img/20210320182130.png" alt=""></p><hr><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在wsl上搭建大数据Hadoop与Spark环境。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl安装systemd</title>
    <link href="https://liuyang0001.gitee.io/2020/08/11/wsl%E5%AE%89%E8%A3%85systemd/"/>
    <id>https://liuyang0001.gitee.io/2020/08/11/wsl安装systemd/</id>
    <published>2020-08-11T05:08:11.000Z</published>
    <updated>2020-08-11T05:25:53.727Z</updated>
    
    <content type="html"><![CDATA[<p>wsl默认是没有systemd服务的，需要自行去安装。</p><a id="more"></a><hr><ul><li>安装daemonize和fontconfig</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y fontconfig daemonize</span><br></pre></td></tr></table></figure><ul><li>编辑<code>/etc/profile</code>脚本，加入如下内容：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '&#123;print $2&#125;')</span><br><span class="line"></span><br><span class="line">if [ -z "$SYSTEMD_PID" ]; then</span><br><span class="line">   sudo /usr/bin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class="line">   SYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '&#123;print $2&#125;')</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n "$SYSTEMD_PID" ] &amp;&amp; [ "$SYSTEMD_PID" != "1" ]; then</span><br><span class="line">    exec sudo /usr/bin/nsenter -t $SYSTEMD_PID -a su - $LOGNAME</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>修改<code>/etc/sudoers</code>文件，加入如下内容：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">%sudo ALL=(ALL) NOPASSWD: <span class="regexp">/usr/</span>sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class="line">%sudo ALL=(ALL) NOPASSWD: <span class="regexp">/usr/</span>bin/nsenter -t [<span class="number">0</span><span class="number">-9</span>]* -a su - [a-zA-Z0<span class="number">-9</span>]*</span><br></pre></td></tr></table></figure><ul><li>执行<code>source /etc/profile</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>执行<code>systemctl</code>验证是否能够正常操作。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl --version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200811131752.png" alt=""></p><blockquote><p><a href="https://www.jianshu.com/p/a20c2d58eaac" target="_blank" rel="noopener">参考文章地址</a></p></blockquote><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wsl默认是没有systemd服务的，需要自行去安装。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl安装docker</title>
    <link href="https://liuyang0001.gitee.io/2020/08/11/wsl%E5%AE%89%E8%A3%85docker/"/>
    <id>https://liuyang0001.gitee.io/2020/08/11/wsl安装docker/</id>
    <published>2020-08-11T02:49:22.000Z</published>
    <updated>2020-08-11T04:57:37.367Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何在wsl2上启用docker服务。</p><a id="more"></a><hr><p>[TOC]</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><ul><li>安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br></pre></td></tr></table></figure><ul><li>信任 Docker 的 GPG 公钥</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><ul><li>添加软件仓库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><ul><li>最后安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><p><hr></p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><ul><li>添加用户</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser <span class="variable">$USER</span> docker</span><br></pre></td></tr></table></figure><ul><li>重启服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><ul><li>尝试运行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200811112815.png" alt=""></p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200811112455.png" alt=""></p><blockquote><p>如果报错，可能是被墙了，建议翻墙后再次尝试。还是不管用的，建议先试试wsl –shutdown重启wsl。</p></blockquote><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何在wsl2上启用docker服务。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl配置java环境</title>
    <link href="https://liuyang0001.gitee.io/2020/08/03/wsl%E9%85%8D%E7%BD%AEjava%E7%8E%AF%E5%A2%83/"/>
    <id>https://liuyang0001.gitee.io/2020/08/03/wsl配置java环境/</id>
    <published>2020-08-03T12:34:02.000Z</published>
    <updated>2020-08-03T15:09:46.726Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何在wsl中配置java编译环境，以及如何使用vscode进行编译调试。</p><a id="more"></a><hr><p>[TOC]</p><hr><h1 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h1><ul><li><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">点击进入到oracle/jdk的下载页面</a></p></li><li><p>选择合适的安装包</p></li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803203805.png" alt=""></p><ul><li>解压</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf ./jdk-*</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803204743.png" alt=""></p><ul><li>移动到自己的软件目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r jdk1*  ~/jdk</span><br></pre></td></tr></table></figure><hr><h1 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h1><ul><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">点击进入maven的下载页面</a></li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803223915.png" alt=""></p><ul><li>解压</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf ./apache*</span><br></pre></td></tr></table></figure><ul><li>移动到自己的软件目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r apache*  ~/mvn</span><br></pre></td></tr></table></figure><hr><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><ul><li>打开sh配置文件</li></ul><p>如果用的是bash，就打开.bashrc，我这里用的是zsh，则打开.zshrc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>加入jdk的环境变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdk环境</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/你的用户名/jdk</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maven环境</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/home/你的用户名/mvn</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803205505.png" alt=""></p><ul><li>重新加载zshrc</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>测试环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803205926.png" alt=""></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure><hr><h1 id="使用vscode调试java"><a href="#使用vscode调试java" class="headerlink" title="使用vscode调试java"></a>使用vscode调试java</h1><ul><li>新建一个java目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/java</span><br></pre></td></tr></table></figure><ul><li>进入java，创建一个java文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/java &amp;&amp; touch test.java</span><br></pre></td></tr></table></figure><ul><li>进入到vscode中</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><ul><li>下载插件 java扩展包</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803224934.png" alt=""></p><blockquote><p>如果遇到问题：【很抱歉，激活面向 Java 的 IntelliCode 支持时遇到问题。有关详细信息，请查看“针对 Java 的语言支持”和 “VS IntelliCode” 输出窗口】</p><p><strong>手动降级language support…..到0.64.1</strong></p></blockquote><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803225303.png" alt=""></p><ul><li>打开刚创建的java文件输入</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好，世界"</span>);</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"value of x: "</span> + x);</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指定当前的路径下的java路径，如果没有则自己再.vscode下创建一个setting.json文件</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"java.home"</span>:<span class="string">"/home/liu/jdk"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803230250.png" alt=""></p><ul><li>添加断点，使用F5调试运行</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200803230615.png" alt=""></p><ul><li>完美运行</li></ul><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何在wsl中配置java编译环境，以及如何使用vscode进行编译调试。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>利用CDN加速GithubPage访问速度</title>
    <link href="https://liuyang0001.gitee.io/2020/07/30/%E5%88%A9%E7%94%A8CDN%E5%8A%A0%E9%80%9FGithubPage%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
    <id>https://liuyang0001.gitee.io/2020/07/30/利用CDN加速GithubPage访问速度/</id>
    <published>2020-07-30T04:24:51.000Z</published>
    <updated>2020-08-01T03:35:48.770Z</updated>
    
    <content type="html"><![CDATA[<p>在国内，githubpage的访问速度相当感人，于是使用CDN加速就变得十分有必要了。</p><a id="more"></a><hr><p>[TOC]</p><hr><h1 id="Github-Page"><a href="#Github-Page" class="headerlink" title="Github Page"></a>Github Page</h1><p>Github Pages为Github提供的一项静态站点托管服务，它直接从Github仓库获取静态文件进行发布，然后提供一个<code>github.io</code>的二级域名供用户访问，支持绑定自定义域名，支持开启HTTPS，开启HTTPS会自动申请证书同时在证书过期前自动续签，这一切都是<strong>免费</strong>的，使用极其简单，只需要将你的静态文件提交到Github，然后开启Pages服务即可，<a href="https://ops-coffee.cn/" target="_blank" rel="noopener">我的博客</a>就托管于Github Pages</p><blockquote><p>Github Pages免费且稳定的服务让我可以专注内容，而无需考虑成本及维护的问题，非常方便广受好评，但其最大的一个问题就是国内访问速度很慢，如何简单快速又低成本的解决这个问题呢？这里介绍一个服务：Netlify</p></blockquote><h1 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h1><p>Netlify是一家提供静态网站托管的综合平台，支持自动从Github等仓库拉取代码并构建成静态网站进行发布，同时也支持自定义域名，自动申请SSL证书等功能，更为重要的是自动启用<strong>CDN加速</strong>，国内访问速度要快很多</p><p>以下分别是Github Pages和Netlify两个平台同一项目请求速度的对比图</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.01.png" alt="img"></p><p>从上图的测试结果可以看出国内各地的访问速度Netlify都能完胜，接下来详细介绍下如何通过Netlify给你的Github Pages加速</p><p>打开<a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify官网</a>，点击右上角的<code>Sign up</code>注册账号，这里推荐关联Github账号</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.02.png" alt="img"></p><p>关联认证后进入Netlify的后台页面，如下图，点击<code>New site from Git</code></p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.03.png" alt="img"></p><p>选择网站源码托管的代码仓库类型，支持Github、Gitlab以及Bitbucket，选择<code>GitHub</code></p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.04.png" alt="img"></p><p>然后会进入Github的认证授权页面，点击<code>Authorize Netlify by Netlify</code></p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.05.png" alt="img"></p><p>点击<code>Only select repositories</code>选择要授权的Github仓库，当然也可以直接选择授权所有仓库，这个授权在设置中可以改</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.06.png" alt="img"></p><p>授权完成回到Netlify后台页面，选择我们刚刚授权的Github仓库继续</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.07.png" alt="img"></p><p>选择部署的用户以及分支，如果是一些需要编译的项目，还支持定义编译的命令以及最终发布的目录，纯静态网站的话都不需要填写，直接点击<code>Deploy site</code>即可完成部署</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.08.png" alt="img"></p><p>部署完成后，Netlify会自动生成一个随机的二级域名<code>xxx.netlify.com</code>，我们可以修改为自定义的二级域名，点击<code>Site Settings</code></p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.09.png" alt="img"></p><p>General -&gt; Site details下点击<code>Change site name</code>，可以为这个站点设置一个自定义的名字，二级域名也会相应改变</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.10.png" alt="img"></p><p>如果你想绑定自己的域名，需要先在域名管理系统里新建解析，将域名CNAME指向到你的netlify二级域名，以阿里云为例如下</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.11.png" alt="img"></p><p>然后进入Netlify管理后台，Domain management -&gt; Domains，点击<code>Add domain alias</code>，填入你的自定义域名</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.12.png" alt="img"></p><p>待域名解析生效后就会看到新绑定的域名变为绿色，并且设置为了主域名</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.13.png" alt="img"></p><p>最后为自定义域名开启HTTPS支持，Domain management -&gt; HTTPS，点击<code>Verify DNS configuration</code>，域名验证通过则会自动申请证书</p><p><img src="https://blz.nosdn.127.net/sre/images/20200313.14.png" alt="img"></p><p>至此Netlify与Github绑定完成，可以通过自定义域名访问网站了，之后你每一次提交代码到Github，便会<strong>自动</strong>发布至Netlify，无需额外操作，非常方便</p><h1 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h1><p>如果你是主域名要绑定Netlify，且必须使用A记录的话，可以直接ping一下你的Netlify二级域名地址得到的IP便可以作为域名解析，例如我的域名是<code>ops-coffee.netlify.com</code>，ping之后得到的地址是<code>157.230.35.153</code>，可以多ping几次得到不同的地址，都绑定到域名上以防止单节点故障</p><p>国内也有类似于Github pages这样的服务，例如Gitee和Coding提供的pages服务，在速度方面要有不少的优势，但稳定性欠佳，且可能会面临层层审查域名备案等问题</p><p>如果你的域名有备案，项目又是纯静态的话还可以考虑直接托管在国内的一些对象存储服务上，例如七牛云、腾讯云等，然后开启CDN加速，效果也不错，并且大多都有免费流量可以使用</p><p>Github Pages和Netlify这种免费且可高度自定义的方案，在满足我们个性化需求的同时，省去了维护成本和资金压力，可以让站点活得更久，从而让我们把重点放在持续不断的输出内容，形成良性循环，赶紧试试吧</p><hr><p><strong>本篇转载于ops-coffee，仅个人使用。</strong></p><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在国内，githubpage的访问速度相当感人，于是使用CDN加速就变得十分有必要了。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://liuyang0001.gitee.io/categories/Others/"/>
    
    
      <category term="CDN" scheme="https://liuyang0001.gitee.io/tags/CDN/"/>
    
      <category term="Github" scheme="https://liuyang0001.gitee.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>wsl配置nodejs环境</title>
    <link href="https://liuyang0001.gitee.io/2020/07/30/wsl%E9%85%8D%E7%BD%AEnodejs%E7%8E%AF%E5%A2%83/"/>
    <id>https://liuyang0001.gitee.io/2020/07/30/wsl配置nodejs环境/</id>
    <published>2020-07-30T01:56:40.000Z</published>
    <updated>2020-07-30T04:24:35.987Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何在wsl-ubuntu下配置最新的<code>node.js</code>环境。</p><a id="more"></a><hr><p>[TOC]</p><hr><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><ul><li>打开<a href="https://nodejs.org/en/download/current/" target="_blank" rel="noopener">Node.js官网</a></li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200730114722.png" alt=""></p><ul><li>下载安装包</li></ul><blockquote><p>最好放在一个容易找到的位置</p></blockquote><ul><li>打开wsl找到安装包的位置，进行解压。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf node-v*.xz</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200730115036.png" alt=""></p><ul><li>拷贝解压的文件夹</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r node* ~/nodejs</span><br></pre></td></tr></table></figure><ul><li>把nodejs添加至环境变量</li></ul><p>如果使用的是zsh：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果使用的是bash：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加nodejs进环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/你的账号名/nodejs/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ul><li>测试环境</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200730120731.png" alt=""></p><p><hr></p><h1 id="Nodejs的使用"><a href="#Nodejs的使用" class="headerlink" title="Nodejs的使用"></a>Nodejs的使用</h1><blockquote><p>占位，后续更新。</p></blockquote><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何在wsl-ubuntu下配置最新的&lt;code&gt;node.js&lt;/code&gt;环境。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl安装字体与配置mlt</title>
    <link href="https://liuyang0001.gitee.io/2020/07/30/wsl%E5%AE%89%E8%A3%85SimHei%E5%AD%97%E4%BD%93/"/>
    <id>https://liuyang0001.gitee.io/2020/07/30/wsl安装SimHei字体/</id>
    <published>2020-07-30T01:55:44.000Z</published>
    <updated>2020-07-30T02:26:58.269Z</updated>
    
    <content type="html"><![CDATA[<p>wsl默认是没有中文字体的，所以使用matplotlib绘图时存在中文就无法显示。所以本篇记录一下如何安装ttf字体，以及在Matplotplotlib中增加该字体。</p><a id="more"></a><hr><p>[TOC]</p><hr><h1 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h1><h2 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h2><p>直接百度搜索下载SimHei字体，就可以找到对应网页进行下载。</p><h2 id="更改路径与权限"><a href="#更改路径与权限" class="headerlink" title="更改路径与权限"></a>更改路径与权限</h2><ul><li>拷贝字体到 usr/share/fonts </li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp SimHei.ttf  /usr/share/fonts/SimHei.ttf</span><br></pre></td></tr></table></figure><ul><li>更改该文件夹的权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 /usr/share/fonts</span><br></pre></td></tr></table></figure><hr><h1 id="配置matplotlib"><a href="#配置matplotlib" class="headerlink" title="配置matplotlib"></a>配置matplotlib</h1><h2 id="删除原来的缓存"><a href="#删除原来的缓存" class="headerlink" title="删除原来的缓存"></a>删除原来的缓存</h2><ul><li>找到缓存路径</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200730101344.png" alt=""></p><ul><li>删除缓存</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /home/liu/.cache/matplotlib</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li>找到配置文件路径</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200730101736.png" alt=""></p><ul><li>编辑配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /home/liu/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc</span><br></pre></td></tr></table></figure><p>添加下列数据：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">font.family : sans-serif</span><br><span class="line">font.sans-serif : SimHei</span><br><span class="line">axes.unicode_minus : False</span><br></pre></td></tr></table></figure><ul><li>重启jupyter即可</li></ul><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wsl默认是没有中文字体的，所以使用matplotlib绘图时存在中文就无法显示。所以本篇记录一下如何安装ttf字体，以及在Matplotplotlib中增加该字体。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl中使用jupyter-lab</title>
    <link href="https://liuyang0001.gitee.io/2020/07/29/wsl%E4%B8%AD%E4%BD%BF%E7%94%A8jupyter-lab/"/>
    <id>https://liuyang0001.gitee.io/2020/07/29/wsl中使用jupyter-lab/</id>
    <published>2020-07-29T02:51:44.000Z</published>
    <updated>2020-07-29T06:09:17.770Z</updated>
    
    <content type="html"><![CDATA[<p>wsl安装完成直接使用jupyter-lab，会出现无法自动打开浏览器，即使打开浏览器也会出现“找不到文件”的问题，这篇记录一下如何完美解决这些问题。</p><a id="more"></a><hr><p>[TOC]</p><h1 id="安装jupyter-lab"><a href="#安装jupyter-lab" class="headerlink" title="安装jupyter-lab"></a>安装jupyter-lab</h1><p>其实直接安装anaconda3就可以了，<a href="https://liuyang0001.github.io/2020/07/24/wsl安装anaconda笔记/" target="_blank" rel="noopener">具体请参考这里</a></p><hr><h1 id="使用jupyter-lab"><a href="#使用jupyter-lab" class="headerlink" title="使用jupyter-lab"></a>使用jupyter-lab</h1><p>打开wsl，键入 jupyter lab 就可以了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab</span><br></pre></td></tr></table></figure><p>这时候我们虽然<strong>不能正常的跳转浏览器</strong>打开，但可以看到对应的链接，<code>ctrl+鼠标左键点击</code>就可进入正确的界面了。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200729133827.png" alt=""></p><h1 id="解决自动跳转问题"><a href="#解决自动跳转问题" class="headerlink" title="解决自动跳转问题"></a>解决自动跳转问题</h1><h2 id="1-找到浏览器的位置"><a href="#1-找到浏览器的位置" class="headerlink" title="1.找到浏览器的位置"></a>1.找到浏览器的位置</h2><ul><li>点开快捷方式的属性，复制“目标位置”中的路径</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200729131923.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files (x86)\Google\Chrome\Application\chrome.exe</span><br></pre></td></tr></table></figure><p>在wsl中找到该位置，其实就是在将该路径转换成linux中的路径</p><blockquote><p><strong>注意：所有的空格或者符号前都需要加防转义符‘\’</strong></p></blockquote><p>如果和我的路径一样，直接复制下面即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe</span><br></pre></td></tr></table></figure><ul><li>在<code>wsl</code>中键入下面命令尝试访问，如果能正确的打开浏览器，说明路径是对的</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe <span class="string">"https://liuyang0001.github.io/"</span></span><br></pre></td></tr></table></figure><ul><li>这个路径太长了，而且手打起来很麻烦，所以我们建立一个软连接</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ln -s /mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe /usr/bin/chrome</span><br></pre></td></tr></table></figure><ul><li>验证软连接是否成功，看能否成功驱动浏览器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chrome https://liuyang0001.github.io/</span><br></pre></td></tr></table></figure><h2 id="2-编辑jupyter配置文件"><a href="#2-编辑jupyter配置文件" class="headerlink" title="2.编辑jupyter配置文件"></a>2.编辑jupyter配置文件</h2><ul><li>首先我们先生成默认配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><ul><li>打开配置文件，更改浏览器的驱动路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><blockquote><p>编辑器这里推荐使用nano，因为可以很方便的进行搜索等操作，当然vim也可以</p></blockquote><p>我们直接在文件的最后面，加上下面这段代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 自定义浏览器</span></span><br><span class="line">import webbrowser</span><br><span class="line">webbrowser.register(<span class="string">'chrome'</span>,None,webbrowser.GenericBrowser(<span class="string">'/usr/bin/chrome'</span>))</span><br><span class="line">c.NotebookApp.browser = <span class="string">'chrome'</span></span><br><span class="line"><span class="comment"># --------------------------------------------------</span></span><br></pre></td></tr></table></figure><blockquote><p>nano操作：Ctrl+O保存，确认，Ctrl+X退出</p></blockquote><ul><li>运行jupyter lab 尝试，发现浏览器已经可以正常打开了，但是会出现找不到文件的情况：</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200729104846.png" alt=""></p><blockquote><p>这是由于WSL使用重定向文件启动浏览器可能会导致浏览器无法加载。【浏览器之间的文件结构/路径不同】</p><p>所以需要设置<strong>禁用重定向</strong>，从而允许浏览器使用URL和可见标记启动。</p></blockquote><ul><li>设置禁用重定向</li></ul><p>重新打开刚才的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p><code>Ctrl +W</code>进行搜索<code>c.NotebookApp.use_redirect_file,</code> 并该项设为False</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200729140540.png" alt=""></p><ul><li>保存退出，重新打开jupyter lab就已经可以正常运行了</li></ul><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wsl安装完成直接使用jupyter-lab，会出现无法自动打开浏览器，即使打开浏览器也会出现“找不到文件”的问题，这篇记录一下如何完美解决这些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl使用zsh与终端美化</title>
    <link href="https://liuyang0001.gitee.io/2020/07/28/wsl%E4%BD%BF%E7%94%A8zsh%E4%B8%8E%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"/>
    <id>https://liuyang0001.gitee.io/2020/07/28/wsl使用zsh与终端美化/</id>
    <published>2020-07-28T14:32:20.000Z</published>
    <updated>2021-04-05T07:36:29.412Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何从bash切换到zsh，如何使用oh-my-zsh对终端进行美化以及zsh一些常用插件的安装。</p><a id="more"></a><hr><p>[TOC]</p><h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h1><ul><li>直接使用apt命令安装即可</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><ul><li>切换为shell为zsh</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><hr><h1 id="美化zsh"><a href="#美化zsh" class="headerlink" title="美化zsh"></a>美化zsh</h1><p>这是我修改后的终端样式：</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200728234523.png" alt=""></p><h2 id="安装Oh-My-Zsh"><a href="#安装Oh-My-Zsh" class="headerlink" title="安装Oh My Zsh"></a>安装Oh My Zsh</h2><blockquote><p>注意：这一步最好在~目录下打开。否则可能会出错。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>选择一种方式进行安装：</p><ul><li>使用 curl 命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><ul><li>或者使用wget命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安装-Powerlevel10k主题"><a href="#安装-Powerlevel10k主题" class="headerlink" title="安装 Powerlevel10k主题"></a>安装 Powerlevel10k主题</h2><ul><li>使用git进行下载</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure><ul><li>打开zsh的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure><ul><li>选择主题为我们下载主题</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=powerlevel10k/powerlevel10k</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200728225310.png" alt=""></p><ul><li>使之生效</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><p>为了防止终端可能会出现乱码，也是因为你的电脑不支持那么多字体，所以我们需要先安装扩展字体。</p><p>Powerlevel10k 作者推荐使用 <a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k" target="_blank" rel="noopener">Meslo Nerd Font</a> 字体，Download these four ttf files:</p><ul><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS NF Regular.ttf" target="_blank" rel="noopener">MesloLGS NF Regular.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS NF Bold.ttf" target="_blank" rel="noopener">MesloLGS NF Bold.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS NF Italic.ttf" target="_blank" rel="noopener">MesloLGS NF Italic.ttf</a></li><li><a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS NF Bold Italic.ttf" target="_blank" rel="noopener">MesloLGS NF Bold Italic.ttf</a></li></ul><p>Double-click on each file and click “Install”. This will make <code>MesloLGS NF</code> font available to all applications on your system. </p><p>WSL配置字体其实就是配置终端的字体，点击设置会自动跳转到一个json格式的文档。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200729001219.png" alt=""></p><p>将文档中对应部分换成下面这个，对应的美化配置都有注释，可自行调整：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"defaults":</span><br><span class="line">        &#123;</span><br><span class="line">            // Put settings here that you want to apply to all profiles.</span><br><span class="line">            "acrylicOpacity": 0.8, //背景透明度</span><br><span class="line">            // "useAcrylic": true, // 启用毛玻璃</span><br><span class="line">            //"backgroundImage": "C:\\Users\\Liu\\Pictures\\ubuntu.jpg", //背景图片</span><br><span class="line">            // "backgroundImageOpacity": 0.5, //图片透明度</span><br><span class="line">            "backgroundImageStretchMode": "fill", //填充模式</span><br><span class="line">            "icon": "C:\\Users\\Liu\\Pictures\\最近\\1121490.png", //图标</span><br><span class="line">            "fontFace": "MesloLGS NF", //字体</span><br><span class="line">            "fontSize": 14, //文字大小</span><br><span class="line">            //"colorScheme": "Solarized Light", //主题</span><br><span class="line">            "cursorColor": "#FFFFFF", //光标颜色</span><br><span class="line">            "cursorShape": "bar" //光标形状</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h2 id="配置-Powerlevel10k"><a href="#配置-Powerlevel10k" class="headerlink" title="配置 Powerlevel10k"></a>配置 Powerlevel10k</h2><blockquote><p>在上面source ~/.zshrc应该就会自动进入自动配置了。</p><p>后面想再修改使用该命令即可</p></blockquote><h3 id="自动配置脚本"><a href="#自动配置脚本" class="headerlink" title="自动配置脚本"></a>自动配置脚本</h3><p>Powerlevel10k 提供了一个配置脚本，运行脚本后只需回答几个简单的问题即可完成配置。</p><p>直接输入 <code>p10k configure</code> 即可进入配置问答界面，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200728225426.png" alt=""></p><p>完成后会生成一个配置文件 <code>~/.p10k.zsh</code>，并且在 <code>~/.zshrc</code> 中自动加入了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.</span></span><br><span class="line">[[ -f ~/.p10k.zsh ]] &amp;&amp; <span class="built_in">source</span> ~/.p10k.zsh</span><br></pre></td></tr></table></figure><blockquote><p>在配置过程中需要注意的是，<code>Instant Promt Mode</code> 尽量选择打开，可以加快终端启动速度，详情请见<a href="https://github.com/romkatv/powerlevel10k#instant-prompt" target="_blank" rel="noopener">这里</a>。</p></blockquote><h3 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h3><p>在 Powerlevel10k 新生成的配置文件 <code>~/.p10k.zsh</code> 中根据个人喜好进行个性化设置。</p><blockquote><p>每次修改配置文件后重启终端或者新开一个 tab 即可显示。<br>在 <code>vim</code> 中可以通过 <code>:/str</code> 来执行搜索，通过 <code>N</code> 或 <code>n</code> 键来跳转到上一个结果或下一个结果。</p></blockquote><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><p>重新加载zsh的配置文件，使得配置能够生效。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>Oh My Zsh 有非常丰富的<a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins" target="_blank" rel="noopener">插件</a>，使用插件可以使得在终端的效率翻倍，下面介绍 5 个我常用的插件。<br>插件均需在配置文件 <code>~/.zshrc</code> 中写出，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  github</span><br><span class="line">  autojump</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git" target="_blank" rel="noopener">git plugin</a></p><p>提供丰富的 git 别名与几个有用的函数。</p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/github" target="_blank" rel="noopener">github plugin</a> 提供几个快捷的函数。</p><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>使用apt安装即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autojump</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a> 可以记录下来你之前 <code>cd</code> 到访过的所有目录，下次要去那个目录时不需要输入完整的路径，直接 <code>j somedir</code> 即可到达，甚至那个目标目录的名称只输入开头也可以。</p><p><a href="https://github.com/wting/autojump#installation" target="_blank" rel="noopener">github地址</a></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">zsh-syntax-highlighting</a>，终端命令语法高亮。</p><ul><li>克隆</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><ul><li>在~/.zshrc 中配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="noopener">zsh-autosuggestions</a> 终端命令自动推荐，会记录下来之前使用过的命令，当你输入开头时，会暗色提示之前的历史命令供你选择，可直接按右方向键选中该命令。</p><ul><li>克隆</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><ul><li>在~/.zshrc 中配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(zsh-autosuggestions)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins" target="_blank" rel="noopener">更多插件，请自行点击查看github。</a></p></blockquote><hr><h1 id="zsh配置环境变量"><a href="#zsh配置环境变量" class="headerlink" title="zsh配置环境变量"></a>zsh配置环境变量</h1><p>这里拿之前装好的anaconda3举例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>在其中加入anaconda3的环境变量，路径换成自己的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=/home/liu/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>运行python测试结果：</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200728192154.png" alt=""></p><p>成功运行，环境变量配置成功。</p><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何从bash切换到zsh，如何使用oh-my-zsh对终端进行美化以及zsh一些常用插件的安装。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl导致vmmem占用高解决办法</title>
    <link href="https://liuyang0001.gitee.io/2020/07/26/wsl%E5%AF%BC%E8%87%B4vmmem%E5%8D%A0%E7%94%A8%E9%AB%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://liuyang0001.gitee.io/2020/07/26/wsl导致vmmem占用高解决办法/</id>
    <published>2020-07-26T14:02:34.000Z</published>
    <updated>2020-08-02T06:05:10.995Z</updated>
    
    <content type="html"><![CDATA[<p>自从装了wsl我这个年迈的电脑就更加吃力，尤其是内存基本上都要占到90%以上，打开任务管理器一看内存一半以上都是被vmmem吃掉了，于是在网上寻找解决办法，并记录优化过程。</p><a id="more"></a><hr><h1 id="定期执行缓存删除"><a href="#定期执行缓存删除" class="headerlink" title="定期执行缓存删除"></a>定期执行缓存删除</h1><ul><li>在WSL bash上，执行以下命令，并进入编辑模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo crontab -e -u root</span><br></pre></td></tr></table></figure><blockquote><p>第一次运行会让你选择编译器，我选择了nano，感觉更加友好。</p></blockquote><p>并添加以下行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/15 * * * * sync; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches; touch /root/drop_caches_last_run</span><br></pre></td></tr></table></figure><blockquote><p>*/15 表示将每15分钟执行一次。您可以根据需要更改它</p></blockquote><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726222502.png" alt=""></p><ul><li>自动启动cron服务</li></ul><p>在<code>~/.bashrc</code> 上添加以下行，允许启动cron服务而无需输入root密码，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ -z &quot;$(ps -ef | grep cron | grep -v grep)&quot; ] &amp;&amp; sudo /etc/init.d/cron start &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure><blockquote><p>如果使用zsh，也在zshrc添加这句话。</p></blockquote><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726222643.png" alt=""></p><ul><li>在WSL bash上执行并添加以下行：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ALL=NOPASSWD: /etc/init.d/cron start</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726222739.png" alt=""></p><hr><h1 id="硬限制最大内存"><a href="#硬限制最大内存" class="headerlink" title="硬限制最大内存"></a>硬限制最大内存</h1><ul><li>打开文件夹，在地址栏输入<code>%UserProfile%</code>，并回车。</li><li>新建文件<code>.wslconfig</code>，并编辑内容：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=4GB</span><br><span class="line">swap=8GB</span><br><span class="line">localhostForwarding=true</span><br></pre></td></tr></table></figure><h1 id="使配置生效"><a href="#使配置生效" class="headerlink" title="使配置生效"></a>使配置生效</h1><p>要确保所有更改都生效，请在<code>powershell</code>上执行 <code>wsl --shutdown</code> 。然后重新打开您的WSL终端.</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>在wsl终端上可以通过查看/ <code>root / drop_caches_last_run</code>上次修改日期来检查cron作业是否正在相应地运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">stat</span> -c <span class="string">'%y'</span> /root/drop_caches_last_run</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726222829.png" alt=""></p><blockquote><p>上面设置的十五分钟一次，你可以计时看看有没有记录。</p></blockquote><h1 id="ISSUE"><a href="#ISSUE" class="headerlink" title="ISSUE"></a>ISSUE</h1><p><a href="https://github.com/microsoft/WSL/issues/4166" target="_blank" rel="noopener">这个问题，在github以上已经大量反馈，点击这里查看issue详情</a></p><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从装了wsl我这个年迈的电脑就更加吃力，尤其是内存基本上都要占到90%以上，打开任务管理器一看内存一半以上都是被vmmem吃掉了，于是在网上寻找解决办法，并记录优化过程。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl安装/卸载mysql</title>
    <link href="https://liuyang0001.gitee.io/2020/07/26/wsl%E5%AE%89%E8%A3%85mysql%E8%AE%B0%E5%BD%95/"/>
    <id>https://liuyang0001.gitee.io/2020/07/26/wsl安装mysql记录/</id>
    <published>2020-07-26T06:38:53.000Z</published>
    <updated>2020-07-26T12:44:35.541Z</updated>
    
    <content type="html"><![CDATA[<p>记录下安装mysql的过程，以及遇到的问题和解决方法。</p><p>安装基于Ubuntu-18.04，之前尝试了20.04版本尝试了各种方式无果。</p><a id="more"></a><hr><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><ul><li>首先更新软件源，保证其为最新。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><ul><li>然后通过apt命令安装mysql</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><ul><li>静静等待完成，如果没有出现报错，将会得到下面这样：</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726144807.png" alt=""></p><ul><li>但是不知道你有没有注意到，正常我们安装是会让你输入mysql密码，但是我们没有。于是尝试启动报错：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726145433.png" alt=""></p><ul><li>提示没有权限，于是我们先停止服务给它权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726145727.png" alt=""></p><ul><li>重启服务，尝试登陆，依旧报错.</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726150036.png" alt=""></p><ul><li>这是由于我们安装的过程中并没有输入密码造成的，于是我们需要给自己生成一个密码。</li></ul><p>解决办法：</p><ul><li>直接修改文件使得我们可以先无需密码进行登录：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>在图中的位置加上下面这句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726150705.png" alt=""></p><ul><li>重启mysql服务并进行无密码登陆</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>进入mysql后，分别执行下面三句话：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set authentication_string=password(&quot;你的密码&quot;) where user=&quot;root&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726151531.png" alt=""></p><ul><li>查看当前的状态</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user,plugin from user;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726151740.png" alt=""></p><ul><li>root用户的密码并为成功修改，于是我们再次修改表单：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set authentication_string=password(&quot;你的密码&quot;),plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos;;</span><br></pre></td></tr></table></figure><ul><li>查看修改成功后退出</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user,plugin from user;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726152406.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><ul><li>随后去掉我们之前设置的无密码登陆语句，或者注释掉</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><ul><li>重启mysql服务，尝试登陆。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><ul><li>输入刚才设置的密码，root用户使用密码成功登陆。</li></ul><h1 id="卸载mysql"><a href="#卸载mysql" class="headerlink" title="卸载mysql"></a>卸载mysql</h1><p>安装的过程难免会出错，这时候就可能需要卸载掉软件。下面记录下如何<strong>完全</strong>卸载掉mysql，便于之后重新安装。</p><ul><li>自动卸载mysql*相关的软件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove --purge mysql*</span><br></pre></td></tr></table></figure><ul><li>删除掉卸载不完全留下的文件目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /etc/mysql /var/lib/mysql</span><br></pre></td></tr></table></figure><ul><li>自动卸载无用的程序</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><ul><li>自动清理卸载后的残留信息</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoclean</span><br></pre></td></tr></table></figure><p>这样就mysql就完全卸载好了，之后遵循上面的安装步骤进行安装即可。</p><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下安装mysql的过程，以及遇到的问题和解决方法。&lt;/p&gt;
&lt;p&gt;安装基于Ubuntu-18.04，之前尝试了20.04版本尝试了各种方式无果。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
      <category term="Mysql" scheme="https://liuyang0001.gitee.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>wsl使用vscode调试cpp</title>
    <link href="https://liuyang0001.gitee.io/2020/07/26/wsl%E4%BD%BF%E7%94%A8vscode%E8%B0%83%E8%AF%95cpp/"/>
    <id>https://liuyang0001.gitee.io/2020/07/26/wsl使用vscode调试cpp/</id>
    <published>2020-07-26T06:24:57.000Z</published>
    <updated>2020-07-28T02:17:32.332Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何实现在wsl中使用本地vscode进行调试，编译。</p><a id="more"></a><hr><h1 id="wls安装编译环境"><a href="#wls安装编译环境" class="headerlink" title="wls安装编译环境"></a>wls安装编译环境</h1><h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><p>存储库包含一个名为<code>build-essential</code>的元包，它包含GCC编译器以及编译软件所需的许多库和其他实用程序。</p><p>所以我们直接安装它。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><h2 id="安装gdb"><a href="#安装gdb" class="headerlink" title="安装gdb"></a>安装gdb</h2><p>这个我们直接apt安装就可以了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试是否完成了上面的安装，免得后面出问题。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis gdb</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis g++</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726190906.png" alt=""></p><h2 id="新建一个cpp文件夹"><a href="#新建一个cpp文件夹" class="headerlink" title="新建一个cpp文件夹"></a>新建一个cpp文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir cpp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cpp</span><br></pre></td></tr></table></figure><h2 id="在vscode中打开当前目录"><a href="#在vscode中打开当前目录" class="headerlink" title="在vscode中打开当前目录"></a>在vscode中打开当前目录</h2><p>在命令行中输入code . 首次会自动安装驱动vscode的程序，随后自动打开vscode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><h1 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>之前在windows安装的插件，都会自动给你推荐适合wsl的版本，直接点击在,xxxx中安装就可以了。</p><ul><li>Remote三件套</li></ul><p>在扩展商店搜remote，前三个必装，后面的看你自己的实际需求。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726192052.png" alt=""></p><ul><li>安装 C/cpp扩展</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726192347.png" alt=""></p><ul><li>安装code runner</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726192514.png" alt=""></p><h2 id="配置c-c-扩展"><a href="#配置c-c-扩展" class="headerlink" title="配置c/c++扩展"></a>配置c/c++扩展</h2><ul><li><code>ctrl+shift+p</code> 输入<code>c/c++</code>,找到并点击打开</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726192824.png" alt=""></p><ul><li>修改配置如图</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726193404.png" alt=""></p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726193545.png" alt=""></p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726193653.png" alt=""></p><h2 id="配置Tasks"><a href="#配置Tasks" class="headerlink" title="配置Tasks"></a>配置Tasks</h2><ul><li>在当前目录新建一个cpp文件，方便后面检测到任务</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726194841.png" alt=""></p><ul><li><code>ctrl+shift+p</code> 输入<code>tasks</code>，找到并点击打开</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726194059.png" alt=""></p><ul><li>选择g++</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726194545.png" alt=""> </p><ul><li>复制下面的配置到任务json中</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"windows"</span>: &#123;</span><br><span class="line">        <span class="attr">"options"</span>: &#123;</span><br><span class="line">            <span class="attr">"shell"</span>: &#123;</span><br><span class="line">                <span class="attr">"executable"</span>: <span class="string">"bash.exe"</span>,</span><br><span class="line">                <span class="attr">"args"</span>: [</span><br><span class="line">                    <span class="string">"-c"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"g++ build active file"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"/usr/bin/g++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: g++ build active file"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"/usr/bin/g++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"presentation"</span>: &#123;</span><br><span class="line">                <span class="attr">"echo"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"reveal"</span>: <span class="string">"always"</span>,</span><br><span class="line">                <span class="attr">"focus"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"panel"</span>: <span class="string">"shared"</span>,</span><br><span class="line">                <span class="attr">"showReuseMessage"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"clear"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>F5 运行调试</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726195632.png" alt=""></p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726195735.png" alt=""></p><ul><li>运行调试成功</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726200028.png" alt=""></p><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何实现在wsl中使用本地vscode进行调试，编译。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
      <category term="Cpp" scheme="https://liuyang0001.gitee.io/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>wsl迁移非系统盘</title>
    <link href="https://liuyang0001.gitee.io/2020/07/26/wsl%E8%BF%81%E7%A7%BB%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98/"/>
    <id>https://liuyang0001.gitee.io/2020/07/26/wsl迁移非系统盘/</id>
    <published>2020-07-26T06:24:04.000Z</published>
    <updated>2020-07-26T12:44:24.013Z</updated>
    
    <content type="html"><![CDATA[<p>记录了如何将wsl环境迁移至非系统盘，节约本就不富裕的系统盘空间。</p><a id="more"></a><hr><h1 id="下载-LxRunOffline"><a href="#下载-LxRunOffline" class="headerlink" title="下载 LxRunOffline"></a>下载 LxRunOffline</h1><ul><li><a href="https://github.com/DDoSolitary/LxRunOffline/releases" target="_blank" rel="noopener">点击这里</a>，选择最新版下载即可。</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726154633.png" alt=""></p><hr><h1 id="使用与迁移"><a href="#使用与迁移" class="headerlink" title="使用与迁移"></a>使用与迁移</h1><ul><li>使用管理员权限打开powershell，并找到解压好的文件</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726154823.png" alt=""></p><ul><li>查看当前的wsl环境</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\LxRunOffline.exe list</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726155246.png" alt=""></p><ul><li>使用move命令进行迁移</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\LxRunOffline.exe move -n 分发版 -d 目录</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726161659.png" alt=""></p><blockquote><p>我这里还好没出现任何报错或警告，网上说出现警告也没有任何的问题。</p></blockquote><ul><li>打开检测软件能够正常运行</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726162151.png" alt=""></p><ul><li>检查一下目前的路径也没有问题</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\LxRunOffline.exe get-dir -n Ubuntu-<span class="number">18.04</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200726162428.png" alt=""></p><hr><p><strong>更多的用法请输入<code>.\LxRunOffline</code>查询。</strong></p><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录了如何将wsl环境迁移至非系统盘，节约本就不富裕的系统盘空间。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl安装anaconda</title>
    <link href="https://liuyang0001.gitee.io/2020/07/24/wsl%E5%AE%89%E8%A3%85anaconda%E7%AC%94%E8%AE%B0/"/>
    <id>https://liuyang0001.gitee.io/2020/07/24/wsl安装anaconda笔记/</id>
    <published>2020-07-24T11:31:01.000Z</published>
    <updated>2020-08-07T12:07:32.317Z</updated>
    
    <content type="html"><![CDATA[<p>记录如何在wsl中安装anaconda。</p><a id="more"></a><hr><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><ul><li><a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">点击打开Anaconda的官网</a>，找到下方的Download按钮，来到下载界面。</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724194555.png" alt=""></p><ul><li>下载框中的文件，完成后找到下载的文件位置(最好放在好找的位置)</li><li>在wsl中找到这个文件</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724194830.png" alt=""></p><ul><li>开始安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724194953.png" alt=""></p><p>随后进入安装过程，有提示时候输入yes，一路回车，等待安装结束。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724195927.png" alt=""></p><blockquote><p>这里我们需要记下框中的路径，也就conda的路径，我们需要把它添加进环境变量中。</p></blockquote><hr><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h2 id="bash终端"><a href="#bash终端" class="headerlink" title="bash终端"></a>bash终端</h2><ul><li>编辑profile</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><ul><li>配置conda等的环境变量，就是上面提到的路径，写到bin即可。</li></ul><p>在文件的<strong>最底端</strong>，加上下面的这句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/liu/anaconda3/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ul><li>重新加载环境变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>检查是否成功，输入python，看其是否在anaconda环境下。</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724201013.png" alt=""></p><h2 id="zsh终端"><a href="#zsh终端" class="headerlink" title="zsh终端"></a>zsh终端</h2><p>如果终端已经修改为zsh（没有请略过）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>在其中加入anaconda3的环境变量，路径换成自己的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=/home/liu/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><p>运行python测试结果：</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200728192154.png" alt=""></p><h1 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h1><h2 id="更改pypi源"><a href="#更改pypi源" class="headerlink" title="更改pypi源"></a>更改pypi源</h2><ul><li>创建文件夹</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br></pre></td></tr></table></figure><ul><li>写入配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.doubanio.com/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=pypi.doubanio.com</span><br></pre></td></tr></table></figure><h2 id="更改conda源"><a href="#更改conda源" class="headerlink" title="更改conda源"></a>更改conda源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure><hr><p><strong>Enjoy it !</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录如何在wsl中安装anaconda。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl配置git环境</title>
    <link href="https://liuyang0001.gitee.io/2020/07/24/wsl%E9%85%8D%E7%BD%AEgit%E7%8E%AF%E5%A2%83/"/>
    <id>https://liuyang0001.gitee.io/2020/07/24/wsl配置git环境/</id>
    <published>2020-07-24T08:12:02.000Z</published>
    <updated>2020-07-26T12:44:30.433Z</updated>
    
    <content type="html"><![CDATA[<p>这篇记录下在WSL(Ubuntu-20.04)下如何配置git环境。</p><a id="more"></a><hr><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>直接使用apt-get即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>随后使用<code>whereis git</code> 或者<code>git --version</code>检查是否安装完成。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724161810.png" alt=""></p><hr><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ul><li>配置你的用户名</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name xxx</span><br></pre></td></tr></table></figure><ul><li>配置你的邮箱地址</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email  xxx@xxx.com</span><br></pre></td></tr></table></figure><ul><li>查看是否配置成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724162803.png" alt=""></p><hr><h2 id="配置SSH秘钥"><a href="#配置SSH秘钥" class="headerlink" title="配置SSH秘钥"></a>配置SSH秘钥</h2><ul><li>生成ssh秘钥，把xxx换成你上面填的邮箱</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa  -C <span class="string">"xxxx@xxx.com"</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724163252.png" alt=""></p><ul><li>找到我们生成秘钥并打开公钥</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724163802.png" alt=""></p><ul><li>复制公钥的内容并且打开你的<a href="https://github.com/settings/profile" target="_blank" rel="noopener">github设置界面</a></li><li>找到SSHkey设置，点击右上角的New SSH key</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724164244.png" alt=""></p><ul><li>把刚复制的公钥内容添加进去。</li><li>回到我们的linux命令行，使用ssh命令检查是否配置成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200724164606.png" alt=""></p><blockquote><p>这里要输入yes，而不是直接敲回车，切记。</p></blockquote><hr><p><strong>到这里就配置完成了，Enjoy it.</strong></p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>很简单的步骤，万万没想到，我还是踩坑了。</p><p>总结起来一句话就是：<strong>ssh key配置好了也不代表能用https的方式免密码clone和push</strong>，其实已经配置好了，只是用了错误的clone方式。</p><p>顺便记录一下已经用https方式clone项目的解决办法：</p><ul><li>移除当前的源地址。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><ul><li>添加ssh格式的源地址</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:用户名/Repo名称.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇记录下在WSL(Ubuntu-20.04)下如何配置git环境。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>wsl的安装/升级笔记</title>
    <link href="https://liuyang0001.gitee.io/2020/07/23/WSL2%E7%9A%84%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
    <id>https://liuyang0001.gitee.io/2020/07/23/WSL2的安装笔记/</id>
    <published>2020-07-23T14:04:39.000Z</published>
    <updated>2020-07-26T12:46:24.966Z</updated>
    
    <content type="html"><![CDATA[<p>这部分记录了如何安装wsl，以及如何升级到wsl2的心酸历程。</p><a id="more"></a><hr><h1 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h1><p><strong>安装wsl2对系统版本有硬性的要求：</strong></p><ul><li>运行 Windows 10（<a href="ms-settings:windowsupdate" target="_blank" rel="noopener">已更新到版本 2004</a> 的<strong>内部版本 19041</strong> 或更高版本）。</li><li>通过按 Windows 徽标键 + R，检查你的 Windows 版本，然后键入 <strong>winver</strong>，选择“确定”。  如果内部版本低于 19041，请<a href="ms-settings:windowsupdate" target="_blank" rel="noopener">更新到最新的 Windows 版本</a>。 </li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200723224746.png" alt=""></p><h1 id="升级windows"><a href="#升级windows" class="headerlink" title="升级windows"></a>升级windows</h1><blockquote><p>如果版本达到了要求，则跳过此步骤。</p></blockquote><ul><li><code>Win+S</code> 搜索<strong>预览体验计划</strong></li></ul><p>加入预览体验计划，获取更新版本。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200723224245.png" alt=""></p><ul><li>进行windows更新</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200723224525.png" alt=""></p><p>然后就是漫长的等待过程，无论是下载还是安装的过程都很漫长。</p><hr><h1 id="WSL的安装"><a href="#WSL的安装" class="headerlink" title="WSL的安装"></a>WSL的安装</h1><ul><li><p>使用<strong>管理员</strong>权限打开powershell</p></li><li><p>启用“适用于 Linux 的 Windows 子系统”可选功能</p></li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><blockquote><p>这时候wsl其实已经启用了，重启就可以了，但还要更新到wsl2，就在后面一起重启了。</p></blockquote><h1 id="升级到WSL2"><a href="#升级到WSL2" class="headerlink" title="升级到WSL2"></a>升级到WSL2</h1><ul><li>启用“虚拟机平台”可选组件</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ul><li><strong>重启</strong>电脑。</li><li>重新<strong>管理员</strong>身份打开powershell，用下面的命令将wsl2设置为默认。</li></ul><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200723225303.png" alt=""></p><p>出现上面这行就是好了，如果<strong>有问题请参考后文</strong>中遇到的问题及解决办法。</p><hr><h1 id="安装linux分发版"><a href="#安装linux分发版" class="headerlink" title="安装linux分发版"></a>安装linux分发版</h1><p>选择一个你喜欢的就可以了，任君挑选。</p><ul><li><p>打开 <a href="https://aka.ms/wslstore" target="_blank" rel="noopener">Microsoft Store</a>，并选择你偏好的 Linux 分发版。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/store.png" alt="Microsoft Store 中的 Linux 分发版的视图"></p><p>单击以下链接会打开每个分发版的 Microsoft Store 页面：</p><ul><li><a href="https://www.microsoft.com/store/apps/9pjn388hp8c9" target="_blank" rel="noopener">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9N9TNGVNDL3Q" target="_blank" rel="noopener">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9n6svws3rx71" target="_blank" rel="noopener">Ubuntu 20.04 LTS</a></li><li><a href="https://www.microsoft.com/store/apps/9NJFZK00FGKV" target="_blank" rel="noopener">openSUSE Leap 15.1</a></li><li><a href="https://www.microsoft.com/store/apps/9MZ3D1TRP8T1" target="_blank" rel="noopener">SUSE Linux Enterprise Server 12 SP5</a></li><li><a href="https://www.microsoft.com/store/apps/9PN498VPMF3Z" target="_blank" rel="noopener">SUSE Linux Enterprise Server 15 SP1</a></li><li><a href="https://www.microsoft.com/store/apps/9PKR34TNCV07" target="_blank" rel="noopener">Kali Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9MSVKQC78PK6" target="_blank" rel="noopener">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/store/apps/9n6gdm4k2hnc" target="_blank" rel="noopener">Fedora Remix for WSL</a></li><li><a href="https://www.microsoft.com/store/apps/9NV1GV1PXZ6P" target="_blank" rel="noopener">Pengwin</a></li><li><a href="https://www.microsoft.com/store/apps/9N8LP0X93VCP" target="_blank" rel="noopener">Pengwin Enterprise</a></li><li><a href="https://www.microsoft.com/store/apps/9p804crf0395" target="_blank" rel="noopener">Alpine WSL</a></li></ul></li><li><p>在分发版的页面中，选择“获取”。</p></li></ul><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntustore.png" alt="Microsoft Store 中的 Linux 分发版"></p><p>安心等待片刻，就安装好了，这时你点击开始，就可以在最近安装看见你安装好的分发版了。</p><p>初次启动它会进行一个初始化的过程，需要等待一段时间。完成之后会让你设置账号和密码。</p><p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntuinstall.png" alt="Windows 控制台中的 Ubuntu 解包"></p><hr><h1 id="排查安装问题"><a href="#排查安装问题" class="headerlink" title="排查安装问题"></a>排查安装问题</h1><p>下面是相关的错误和建议的修复措施。 有关其他常见错误及其解决方法，请参阅 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting" target="_blank" rel="noopener">WSL 故障排除页</a>。</p><ul><li><strong>安装失败并出现错误 0x80070003</strong><ul><li>适用于 Linux 的 Windows 子系统只能在系统驱动器（通常是 <code>C:</code> 驱动器）中运行。 请确保分发版存储在系统驱动器上：</li><li>打开“设置”-&gt;“存储”-&gt;“更多存储设置： 更改新内容的保存位置” <img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/appstorage.png" alt="用于在 C: 驱动器中安装应用的系统设置屏幕截图"></li></ul></li><li><strong>WslRegisterDistribution 失败并出现错误 0x8007019e</strong><ul><li>未启用“适用于 Linux 的 Windows 子系统”可选组件：</li><li>打开“控制面板” -&gt; “程序和功能” -&gt; “打开或关闭 Windows 功能”-&gt; 选中“适用于 Linux 的 Windows 子系统”，或使用本文开头所述的 PowerShell cmdlet。</li></ul></li><li><strong>安装失败，出现错误 0x80070003 或错误 0x80370102</strong><ul><li>请确保在计算机的 BIOS 内已启用虚拟化。 有关如何执行此操作的说明因计算机而异，并且很可能在 CPU 相关选项下。</li></ul></li><li><strong>尝试升级时出错：<code>Invalid command line option: wsl --set-version Ubuntu 2</code></strong><ul><li>请确保已启用适用于 Linux 的 Windows 子系统，并且你使用的是 Windows 内部版本 19041 或更高版本。 若要启用 WSL，请在 PowerShell 提示符下以具有管理员权限的身份运行此命令：<code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code>。 可在<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">此处</a>找到完整的 WSL 安装说明。</li></ul></li><li><strong>由于虚拟磁盘系统的某个限制，无法完成所请求的操作。虚拟硬盘文件必须是解压缩的且未加密的，并且不能是稀疏的。</strong><ul><li>请检查 <a href="https://github.com/microsoft/WSL/issues/4103" target="_blank" rel="noopener">WSL GitHub 主题 #4103</a>，其中跟踪了此问题以提供更新的信息。</li></ul></li><li><strong>无法将词语“wsl”识别为 cmdlet、函数、脚本文件或可运行程序的名称。</strong><ul><li>请确保<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#enable-the-virtual-machine-platform-optional-component" target="_blank" rel="noopener">已安装“适用于 Linux 的 Windows 子系统”可选组件</a>。 此外，如果你使用的是 ARM64 设备，并从 PowerShell 运行此命令，则会收到此错误。 请改为从 <a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-6" target="_blank" rel="noopener">PowerShell Core</a> 或从命令提示符运行 <code>wsl.exe</code>。</li></ul></li></ul><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/faq" target="_blank" rel="noopener">常见问题</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-faq" target="_blank" rel="noopener">WSL 2 常见问题解答</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/troubleshooting" target="_blank" rel="noopener">疑难解答</a></p><hr><h1 id="记录所踩的坑"><a href="#记录所踩的坑" class="headerlink" title="记录所踩的坑"></a>记录所踩的坑</h1><blockquote><p>上面的问题和解决办法，是官方的手册给的，下面说记录下安装的心酸历程，如果上面没找到你的问题，可以看看我的经历是不是能给你点帮助：</p></blockquote><ol><li><p>首先是windows版本，我一直保持着最新的版本，想当然的以为版本足够，查了各种方法也装不上wsl2，后来在一个大佬的笔记里发现要打开预览版本更新。</p></li><li><p>之后就是安装WSL 2遇到了 <code>requires an update to its kernel component. For information please visit https://aka.ms/wsl2kernel</code>的问题，然后就下载了最新版本的内核。</p></li><li><p>然后又遇到内核无法安装的问题，这时我已经要炸了，冷静下来想起了解决之前问题时候尝试装过一次内核，随后找到应用卸载的界面卸载了之前装的内核，安装新内核成功。</p></li><li><p>之后也成功的切换到了wsl2，但是从应用商店下载的Ubuntu20,04第一次打开加载报错，不信邪的我切换回了wsl1，再打开Ubuntu成功运行，这时候我心态已经有点崩了，搞来搞去wsl2还是不能用。</p></li><li><p>我又在应用商店下载了Ubuntu18.04，切换回了wsl2重新安装，还是失败，看了下报错<code>0xc03a001a</code>，找到一个大佬的解答说是因为开了<strong>压缩内容以便节省磁盘空间</strong>的原因，首先确定你的一些或者所有的文件夹右上角是否都有两个相对的蓝色箭头，然后找到路径:<code>C:\Users\你的用户名\AppData\Local\Packages\CanonicalGroupLimited.xxxx  (xxx为你所下载的对应Linux发行版)</code>这个文件夹，若它确实是右上角带有<strong>两个相对箭头</strong>，那么：</p></li></ol><blockquote><p>右键 -&gt; 属性 -&gt; 常规 -&gt; 高级 -&gt; 取消勾选 <code>压缩内容以便节省磁盘空间</code> 这一项 -&gt; 确定<br>再次启动所安装的 <code>Linux</code> 发行版应该就可正常使用。</p></blockquote><p>随后我以为终于可以解决了，然而并没有。还是报错，具体是什么忘记了，也没查到答案。最后问题还是自己解决的。我灵机一动，既然wsl1环境可以正常安装，那我是不是在1环境下安装，再转换到2环境下呢？最后问题完美解决。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wsl --set-version Ubuntu-20.04  2</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200723233623.png" alt=""></p><blockquote><p>上面解决办法可能是对的，可能只是需要<strong>重启一下</strong>再点开安装就行了。</p></blockquote><p><strong>终于等到你，还好我没放弃！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这部分记录了如何安装wsl，以及如何升级到wsl2的心酸历程。&lt;/p&gt;
    
    </summary>
    
      <category term="WSL使用笔记" scheme="https://liuyang0001.gitee.io/categories/WSL%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://liuyang0001.gitee.io/tags/Linux/"/>
    
      <category term="WSL" scheme="https://liuyang0001.gitee.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>爬虫项目:Leetcode-Helper</title>
    <link href="https://liuyang0001.gitee.io/2020/06/20/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE-Leetcode-Helper/"/>
    <id>https://liuyang0001.gitee.io/2020/06/20/爬虫项目-Leetcode-Helper/</id>
    <published>2020-06-20T08:31:02.000Z</published>
    <updated>2020-07-30T04:55:21.145Z</updated>
    
    <content type="html"><![CDATA[<p>哪个程序员😁不想一键下载写过的代码，自动上传Github，并且还能生成一份好看的README呢？</p><p>有用的话点个⭐吧，谢谢你。<a href="https://github.com/Liuyang0001/Leetcode-Helper" target="_blank" rel="noopener">项目传送门 |🚪|</a></p><a id="more"></a><hr><p><strong>💕主要功能💕</strong></p><p>🍉 模拟登陆力扣中国站(leetcode-cn)</p><p>🍉 爬取每题提交的ac代码，保存至本地。</p><p>🍉 自动生成优美的README文件至本地。</p><p>🍉 支持自动更新至Github仓库。 </p><p>🍉 加入失败重试机制，减少延时，加快下载速度。</p><p>🍉 加入增量更新功能(根据最近的提交来更新已存在的题库)。【默认】 🆕</p><hr><p><strong>少啰嗦，先看东西 :   <a href="https://github.com/Liuyang0001/LeetCode_By_Python" target="_blank" rel="noopener">具体效果,点击这里 </a></strong> 😃 </p><hr><ul><li>生成的README效果图：</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200613133201.png" alt=""></p><ul><li>生成的源码效果图：</li></ul><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200619174224.png" alt=""></p><hr><p><strong>💕使用说明💕</strong></p><ul><li><strong>clone 该项目到你的本地。</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Liuyang0001/Leetcode-Helper.git</span><br></pre></td></tr></table></figure><ul><li><strong>配置你的cofig.json文件。</strong></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"xx账号xxxx"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"xxx密码xxx"</span>,</span><br><span class="line">    <span class="attr">"repo_path"</span>: <span class="string">"x:/xxx源码仓库的本地路径xxx/"</span>,</span><br><span class="line">    <span class="attr">"git_url"</span>: <span class="string">"https://github.com/xxxxx/xxx仓库名xx/tree/master/codes_auto/"</span>,</span><br><span class="line">    <span class="attr">"download_start_id"</span>: <span class="number">1</span>, </span><br><span class="line">    <span class="attr">"download_end_id"</span>: <span class="number">1000000</span>,</span><br><span class="line">    <span class="attr">"refresh"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"get_recent_submissions_nums"</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>安装依赖库</strong></li></ul><p>依赖库为<code>retry</code> ，<code>pandas</code> ，<code>requests</code>，<code>gitpython</code>可自行安装，或者使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure><ul><li><strong>运行<code>main.py</code>文件</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><hr><blockquote><p>其他说明：</p><ol><li>第一次运行比较慢，主要是需要建立本地数据库，请耐心等待。</li><li><del>后续会增加增量更新，请持续关注。</del> 已加入，默认获取最近40次提交，可以在config修改。</li><li><del>如果发生异常，请尝试重新运行 。</del>   已加入失败重试机制。</li><li>为了运行速度，已生成代码不会覆盖，相同题的代码仅保留一份ac的。</li><li>如果大家有需求的话，可能还会写个GUI界面，会更直观一点。</li></ol></blockquote><hr><p>本人是一个准研一的小菜🐔，在家无事的练手项目，求轻喷。</p><p>Enjoy coding！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哪个程序员😁不想一键下载写过的代码，自动上传Github，并且还能生成一份好看的README呢？&lt;/p&gt;
&lt;p&gt;有用的话点个⭐吧，谢谢你。&lt;a href=&quot;https://github.com/Liuyang0001/Leetcode-Helper&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目传送门 |🚪|&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫项目" scheme="https://liuyang0001.gitee.io/categories/%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="Python" scheme="https://liuyang0001.gitee.io/tags/Python/"/>
    
      <category term="git" scheme="https://liuyang0001.gitee.io/tags/git/"/>
    
      <category term="Spider Study Notes" scheme="https://liuyang0001.gitee.io/tags/Spider-Study-Notes/"/>
    
  </entry>
  
  <entry>
    <title>同时存在unicode-escape和utf-8的解码方法</title>
    <link href="https://liuyang0001.gitee.io/2020/06/09/%E5%90%8C%E6%97%B6%E5%AD%98%E5%9C%A8unicode-escape%E5%92%8Cutf-8%E7%9A%84%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <id>https://liuyang0001.gitee.io/2020/06/09/同时存在unicode-escape和utf-8的解码方法/</id>
    <published>2020-06-09T10:53:12.000Z</published>
    <updated>2020-06-09T12:14:30.522Z</updated>
    
    <content type="html"><![CDATA[<p>在爬取lc提交代码的时候遇到的一个问题，在爬取到的源码中，符号是采用<code>unicode-escape</code>编码的，而其中的中文是采用<code>utf-8</code>编码的，正常解码无论怎样都会出现乱码，本文记录下解决办法。</p><a id="more"></a><p>[TOC]</p><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面是lc第一题爬取的源码，编码为”utf-8”，中文可以正确显示，但是换行符等符号并不能正确显示，因此需要转换。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = <span class="string">"class Solution:\u000A    def twoSum(self, nums: List[int], target: int) \u002D\u003E List[int]:\u000A        dic \u003D defaultdict(int) # 哈希字典\u000A        for i,num in enumerate(nums):\u000A            if num in dic: return [dic[num],i]\u000A            dic[target\u002Dnum]\u003Di"</span></span><br></pre></td></tr></table></figure><p>正常我们的解码是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code = code.encode(&quot;utf-8&quot;).decode(&quot;unicode-escape&quot;)</span><br></pre></td></tr></table></figure><p>这样上面的换行符等就可以正确显示为<code>\n</code>等正确的编码，但是原本上面的中文就是<code>utf-8</code>了，解码为<code>unicode-escape</code>就会出现乱码，输出文件就会像下面的这样。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200609195642.png" alt=""></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><blockquote><p>其实很简单，就是<strong>局部解码</strong>就可以了：</p><ul><li><p>首先利用<strong>正则</strong>表达式找到所有采用<code>unicode-escape</code>编码的字符，</p></li><li><p>然后将其解码再替换原字符串</p></li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">code = re.sub(<span class="string">r'(\\u[\s\S]&#123;4&#125;)'</span>,<span class="keyword">lambda</span> x:x.group(<span class="number">1</span>).encode(<span class="string">"utf-8"</span>).decode(<span class="string">"unicode-escape"</span>),code)</span><br></pre></td></tr></table></figure><p>再来查看一下我们写入的文件，就没有乱码的情况了。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200609194737.png" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在爬取lc提交代码的时候遇到的一个问题，在爬取到的源码中，符号是采用&lt;code&gt;unicode-escape&lt;/code&gt;编码的，而其中的中文是采用&lt;code&gt;utf-8&lt;/code&gt;编码的，正常解码无论怎样都会出现乱码，本文记录下解决办法。&lt;/p&gt;
    
    </summary>
    
      <category term="Spider Study Notes" scheme="https://liuyang0001.gitee.io/categories/Spider-Study-Notes/"/>
    
    
      <category term="Python" scheme="https://liuyang0001.gitee.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://liuyang0001.gitee.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="编码" scheme="https://liuyang0001.gitee.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>2020中传计算机专硕考研经验贴</title>
    <link href="https://liuyang0001.gitee.io/2020/05/29/2020%E4%B8%AD%E4%BC%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E7%A1%95%E8%80%83%E7%A0%94%E7%BB%8F%E9%AA%8C%E8%B4%B4/"/>
    <id>https://liuyang0001.gitee.io/2020/05/29/2020中传计算机专硕考研经验贴/</id>
    <published>2020-05-29T12:18:00.000Z</published>
    <updated>2020-08-08T10:43:12.715Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅仅是我个人的经验贴，记录下考研总结和反思，如果能给你带来一点收获，那就太好了。</p><p>对了，纯主观，不接受反驳。 😃</p><a id="more"></a><hr><h1 id="考前须知"><a href="#考前须知" class="headerlink" title="考前须知"></a>考前须知</h1><p>如果你还没考虑好是不是要考中传，那下面这些点可能会有些劝退，如果很坚决的想考，那么这些也一定要知道。我只拿专硕举例，学硕我也没什么发言权。</p><ol><li><strong>优先一志愿问题</strong>：官网写的调剂和一志愿分别排名，优先一志愿。实际情况是今年扩招了，一志愿未满，<del>仍然一志愿按1:1.2左右的比例录取，然后招30个调剂。</del>【后面有很多一志愿<strong>补录</strong>成功，基本上都上岸了，个人猜测是有一部分调剂上岸，最后并没有来。】<strong>至于往年，没有收过调剂，今年比较特殊。按往年的情况来讲，对你影响不大。</strong></li><li><strong>复试时间问题</strong>：中传的复试时间很晚，<u>若一志愿未上，调剂基本上也不剩什么了</u>，今年情况特殊还有一些，往年更惨一点。</li><li><strong>校内调剂问题</strong>：没有校内调剂这个说法。</li><li><strong>压分问题</strong>：专业课没感觉有压分现象，政治，英语常规操作，不过大家都一样。</li><li><strong>专业课难度</strong>：在只考数据结构里难度中上，甚至考了手写图的代码题。多选题比较爱失分，但好好复习考个110应该问题不大。如果你做过北交大的专业课难度，你就知道我在说什么，北交的专业课真的简单，不过就一门专业课，可以多花点时间，所以还好。</li><li><p><strong>录取分数问题：</strong>今年<strong>最低分国家线录取</strong>，但这不具有代表性，今年情况太特殊了。</p></li><li><p><strong>学硕调专硕问题</strong>：可以报名，但是没有优先政策，就是和所有调剂生一起排名。还是那句话，往年没有收过调剂，今年比较特殊。按往年的情况来讲，对你影响不大。</p></li></ol><hr><h1 id="初试部分"><a href="#初试部分" class="headerlink" title="初试部分"></a>初试部分</h1><p>如果你能接受中传上面“略显”苛刻的情况，那么就往下看吧。</p><h2 id="英语一"><a href="#英语一" class="headerlink" title="英语一"></a>英语一</h2><p>英语这部分我没有什么发言权，毕竟只有过线的成绩。不过我的自我总结可以给你一些忠告：</p><ol><li>英语真题要趁早做，反复做，做到这张<u>卷子里的每个单词你都认识</u>就算合格了。</li><li>可以留一年或者两年de真题，留着模拟考试。</li><li>不用看恋恋有词，不用看恋恋有词，不用看恋恋有词，重要的事情说三遍，不是说不好，是太磨叽了，很浪费时间。</li><li>背单词的软件，我推荐墨墨背单词。</li><li>网课不用看太多，我推荐先把去年的<u>刘晓燕救命班</u>看一遍，你就知道你需要前期的储备是什么。阅读可以看唐迟的。</li><li>不要买模拟试题，用处不大，别浪费钱。</li></ol><h2 id="数学一"><a href="#数学一" class="headerlink" title="数学一"></a>数学一</h2><p>数学这部分其实核心就是多做题，多总结，无他，唯手熟尔。</p><ol><li>数学这部分还是推荐看视频的（可以倍速看，1.5x很爽），不过要一边看一遍记录，不然可能会很快睡着，其实看谁的视频取决于个人风格，张宇确实很有意思，不过我可能更想推荐<u>高昆仑</u>，讲课逻辑很清晰，也经常会给你一些小套路，让你觉得解题挺有意思的，强推。另外，各位也可以支持下我高数老师们的b站号<strong><a href="https://space.bilibili.com/504207128/" target="_blank" rel="noopener">梨米特爱讲课</a></strong>，免费分享各种考研数学的课程，干货很多，各位可以去看看。</li><li>我个人对回归教材这个观点不是很赞同的，我就喜欢看别人给我总结完的，看教材我是真的看不下去，而且我都没买辅导教材（题除外），一般就是打印了一遍网课的讲义，做做笔记这样子，也没感觉有什么不行的，而且很省钱！</li><li>关于习题，我做了两遍题源一千题，但是感觉自己还是很菜，我可能是个榆木脑袋，233333。对了，线代部分没有做，线代部分是我永乐大帝的线代笔记。</li><li>10月开始做真题，两天一套，要掐时间做，我做了15年的，可能有点少，时间不大够了，前期花的时间太多了。所以你可以9月就开始了。</li><li>之后就是最后模拟冲刺阶段了，做了李6，李4，张4. 然后基本上就考试了。</li></ol><h2 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h2><p>政治我能给你的帮助也不太多，几点建议：</p><ol><li>没必要买肖秀荣三件套，你不会翻几次的，相信我。只需要买肖1000题就够了，练练选择手感。</li><li>网课我推荐徐涛的，听过就知道了，可以后台倍速放着当bgm，玄学：锻炼政治语感。据说腿姐的也不错，我们这年腿姐押题压的很准，可惜我没看，心痛。</li><li>对了，我非常推荐小白考研的小程序，可以刷题。很值得买，强推，而且省钱，连上面的肖1000的钱都省下来了，我感觉省钱这一中心思想，贯穿了我公共课的主线。233333</li><li>最后阶段就是背了，这个背诵肖四的话可以关注一下b站的“空卡”小姐姐，他的背诵视频很有用。</li><li>北京地区的政治确实是存在一定压分情况的，但是你们是一样的，而且你选择中传也调剂的希望不多了，所以压不压分对你一志愿没什么影响，但对你调剂有影响，水区的政治主观题给的真的多一些。</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>最后就是专业课了，数据结构，这部分反而简单了，我的建议，时间足够的话，<strong>王道书+习题三遍</strong>，时间不够也至少要两遍。天勤我没做，这里就不推荐了，想看也可以，但两本书的代码风格完全不一样，很容易乱，推荐选一本看，有时间可以做另一本的题。</p><p>往年真题里有数据结构的，我都建议做，比如821的计网+数据结构 ，还有程序设计里的数据结构题。至少做一遍吧，感受下往年的难度，当练手了吧，最好限时做。</p><p>最后说一下新改的<strong>824数据结构的题型：15道单选，填空，10道判断，10道多选，应用题，代码题。</strong></p><p>总体来说，代码部分有难度，我们甚至考了图的代码题，不能拿这个赌还是要掌握，其次就是多选题很容易失分，我们当初大纲都没写这个，吃了大亏啊。</p><hr><h1 id="复试部分"><a href="#复试部分" class="headerlink" title="复试部分"></a>复试部分</h1><h2 id="总成绩构成"><a href="#总成绩构成" class="headerlink" title="总成绩构成"></a>总成绩构成</h2><p><code>总成绩 = (初试分数/5)*0.6 + 复试成绩(百分制)*0.4</code></p><p><code>复试成绩 = 外语听说成绩*0.1 + 专业知识与综合素养*0.9</code></p><p>也就是说<strong>总成绩的1分=初试的8.333分=复试成绩的2.5分</strong>，这也就意味着你<strong>复试比别人高1分就可以抹平初试3.333分的差距</strong>，复试的重要性不用我多说了吧，所以高别人30分的也不代表你就稳了(特别高的话，当我没说)，还是要好好复习专业课，低分的更要好好复习去逆袭，我自己本身就是个很好的例子。</p><p><img src="https://gitee.com/liuyang0001/blogimage/raw/master/img/20200529113244.png" alt=""></p><h2 id="专业知识与综合素养部分"><a href="#专业知识与综合素养部分" class="headerlink" title="专业知识与综合素养部分"></a>专业知识与综合素养部分</h2><p>这部分分成三部分的考核，首先是一分钟自我介绍，然后是专业课抽题部分，个人感觉这部分占比不是很大，我答成什么样子我心理是有b数的，最后成绩很高，只是后面答得比较好，简历写得比较好。回正题，考试官会让你从<strong>十个编号里选一个作为你挑选的题目</strong>，每个编号里<strong>5</strong>个问题，你可以从中任意<strong>选择3个作答</strong>，我们是网络面试，所以是老师读题，你可以选择回答或者不回答当前问题，不会可以跳过，但最后要回答满三个问题。这五个题，一般情况都是数据结构，计算机网络，操作系统，软件工程各一道，剩下还有一道半开放的问题，比如对人工智能的了解，对深度学习算法的理解，对融媒体的了解之类的。下面是我能记起来的考试时出的问题角度，当时考试太紧张，很多都忘了，只能想起这么多了，仅供参考。</p><p><strong>专业课抽题（5选3）</strong></p><ul><li><p>数据结构——直接排序，归并排序比较</p></li><li><p>计网——时分复用</p></li><li><p>软件工程——类图</p></li></ul><p>最后就是专业课提问的部分，主要是从你的<strong>个人陈述（简历），科研设想部分出题</strong>，所以我想提醒大家的是：<strong>只要是写在你简历上的东西，一定要是自己能有把握回答的东西</strong>，要是被问住了，很影响分数。对了，关于简历部分，最重要的是<strong>突出亮点</strong>，把你最牛逼的，最让人眼前一亮的东西展示出来。对于计算机专业，最重要的肯定是<strong>代码能力</strong>，比如你熟悉什么语言（c/python/java…）,做了哪些<strong>项目</strong>，用到了哪些技术栈，有没有<strong>竞赛获奖</strong>（ACM大佬带带我），或者奖学金，绩点高的也可以写上去(像我一样很低的,还挂了好几科的就算了吧),对了，如果你有博客也可以写上去，也是有加分的。最后再强调一遍，只要是写在你简历上的东西，一定要是自己能有把握回答的东西！不太熟的弄懂，不然就别写，(或者侥幸心里的话这种不太熟的放在后面也行)。</p><p>下面是我面试问到的问题，仅供参考。</p><p><strong>专业课面试提问</strong></p><ol><li>阐述下项目xxx的难点。</li><li>介绍一下另一个项目xxxx?</li><li>在python中你熟悉的库有哪些?</li><li>开放问题——你最熟悉的语言，遇到的问题，如何解决?</li><li>谈一下你的科研设想。</li><li>你为什么要选择大数据方向？</li></ol><h2 id="英语听说能力部分"><a href="#英语听说能力部分" class="headerlink" title="英语听说能力部分"></a>英语听说能力部分</h2><p>这部分<strong>占比很低，也拉不开什么差距</strong>，占复试成绩里的10分，也就是总成绩的4分，基本上不会有超过1分的分差，所以像我这种英语只能过线的水平也不用太过担心。说下流程，主要是两个部分的考核，第一部分是一分钟英语自我介绍，第二部分是十选一抽题作答。第一部分没什么好说的，第二部分主要是一些生活类的话题，或者一些很浅的专业知识相关的问题。重复一下，真的不用担心，拉不开差距的一部分，放轻松把自我介绍背熟就ok了，抽题听不懂的话老师也会给你重复。还听不懂还会用英语给你解释，没问题的，老师都很nice，对了，忘了说，你的考官还是专业面的老师，就是一起考完所有的。自我介绍我写的很水，基本上机器翻译的，给你们做个参考吧。</p><p><strong>一分钟自我介绍</strong></p><p><strong>Good afternoon, respected professors!</strong> </p><p><strong>My name is Liu Yang, 24 years old. I graduated in Electronic Information Engineering from Tianjin Polytechnic University. After  graduation，the more I experienced， the clearer I realized the shortcomings of myself.  I’m eager to learn more about computer science and I hope I can study further in CUC. I am a hard-working  student and I will try my best to finish my project no matter how difficult it is.</strong>  </p><p><strong>Besides ,In my spare time, I would like to write my blog, which is a good way to record what I’ve learned or something interesting in my life.</strong></p><p><strong>I am very glad to be here for this interview. I hope I can make a good performance today. That’s all, Thank you !</strong> </p><p><strong>10选1抽题作答</strong></p><p>在你学习c或者python中，遇到的问题如何解决的?(感觉抽到的和上面老师的重了，但是换成英语了)</p><h2 id="复试名单问题"><a href="#复试名单问题" class="headerlink" title="复试名单问题"></a>复试名单问题</h2><p>中传出的复试名单都是乱序的，所以拿到名单第一时间筛选出有用的部分，从而来判断自己的竞争力还是很有必要的，至少你要知道你在复试中排名多少，前后的分数差距。</p><blockquote><p>这是个很好解决的问题，你的考生号都是有规律的，基本上就是：<strong>中传编号+地区号+学院号+方向号+顺序号</strong>，我们需要拿到的有效的数据是：<strong>学院号+方向号</strong>,比如说今年学硕学院号是09，专硕是16，方向号一般为10，20，30这种，根据你们的情况来判断就可以了。会py的可以直接拿我写过的脚本修改一下正则表达式，将名单转成csv格式，然后直接跑就行，不会的就直接Excel搜索也行。脚本文件还有我们这届的复试名单，我放github了，<strong><a href="https://github.com/Liuyang0001/selcet_from_csv/" target="_blank" rel="noopener">脚本传送门</a></strong>。或者给我留言吧，有时间我也可以帮忙，如果我看的到的话。</p></blockquote><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这么又臭又长的流水账能看到这里的应该都是真爱了，祝各位都能如愿上岸！</p><p>有问题留言吧，我看到的话会回的，发邮件也行，对了也可以加群，群里学长很多的，他们说当初收到了很多人的帮助，想要帮助一下下一届，他们真是可爱的人呢。</p><p><strong>群号：1057574055</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅仅是我个人的经验贴，记录下考研总结和反思，如果能给你带来一点收获，那就太好了。&lt;/p&gt;
&lt;p&gt;对了，纯主观，不接受反驳。 😃&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://liuyang0001.gitee.io/categories/Others/"/>
    
    
      <category term="cuc" scheme="https://liuyang0001.gitee.io/tags/cuc/"/>
    
      <category term="考研" scheme="https://liuyang0001.gitee.io/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
</feed>
